## Q3.3
barplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) +
geom_bar(stat="identity") +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall: Jaipur \n2009-2013") +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %d")
barplot
## Q3.3
barplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) +
geom_bar(stat="identity") +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %d")
barplot
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red")
names(district_data)
## Q3.4
district_data %>% mutate(year=substr(date,1,4)) %>%
group_by(year, stname_iaa) %>% summarize(temperature=mean(temperature,na.rm=T))
## Q3.4
district_data %>% mutate(year=substr(date,1,4)) %>%
group_by(stname_iaa, year) %>% summarize(temperature=mean(temperature,na.rm=T))
View(scatterplot)
rm(newdata)
## Q3.4
table <- district_data %>% mutate(year=substr(date,1,4))%>%
group_by(stname_iaa, year) %>%
summarize(temperature=mean(temperature,na.rm=T))
View(table)
reshape(table, idvar="year", timevar="stname_iaa", direction = "wide")
## Q3.4
table <- district_data %>% mutate(year=substr(date,1,4))%>%
group_by(stname_iaa, year) %>%
summarize(temperature=mean(temperature,na.rm=T)) %>% ungroup()
reshape(table, idvar="year", timevar="stname_iaa", direction = "wide")
table<-arrange(table, year)
install.packages("tidyr")
install.packages("tidyr")
library(tidyr)
spread(table, stname_iaa, temperature)
## Q3.4
table <- district_data %>% mutate(year=substr(date,1,4))%>%
group_by(stname_iaa, year) %>%
summarize(temperature=mean(temperature,na.rm=T))
table <- spread(table, stname_iaa, temperature)
## Q3.4
table1 <- district_data %>% mutate(year=substr(date,1,4))%>%
group_by(stname_iaa, year) %>%
summarize(temperature=mean(temperature,na.rm=T))
View(table1)
scatterplot
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red")
scatterplot
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red")),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=-.4, ymax=-.4)
library(grid)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red")),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=-.4, ymax=-.4)
scatterplot
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red")),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=-1, ymax=-1)
scatterplot
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red")),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=-3, ymax=-3)
scatterplot
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red")),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=-2, ymax=-2)
scatterplot
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red")),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=-2.5, ymax=-2.5)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=-2.5, ymax=-2.5)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-25")),
xmax=as.numeric(as.Date("2020-10-25")),ymin=-3, ymax=-3)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=47, ymax=47)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=46, ymax=46)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=45, ymax=45)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=45, ymax=45)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month")
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(breaks = seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month"), date_labels =  "%b %d") + #scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=45.5, ymax=45.5)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(breaks = seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month"), date_labels =  "%b %d") + #scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-14")),
xmax=as.numeric(as.Date("2020-10-14")),ymin=-2.5, ymax=-2.5)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(breaks = seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month"), date_labels =  "%b %d") + #scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-10")),
xmax=as.numeric(as.Date("2020-10-10")),ymin=-3, ymax=-3)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(breaks = seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month"), date_labels =  "%b %d") + #scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-5")),
xmax=as.numeric(as.Date("2020-10-5")),ymin=-4, ymax=-4)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(breaks = seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month"), date_labels =  "%b %d") + #scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-5")),
xmax=as.numeric(as.Date("2020-10-5")),ymin=-3.5, ymax=-3.5)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(breaks = seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month"), date_labels =  "%b %d") + #scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-5")),
xmax=as.numeric(as.Date("2020-10-5")),ymin=-3.5, ymax=-3.5) +
annotation_custom(textGrob("June 01", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-06-1")),
xmax=as.numeric(as.Date("2020-06-1")),ymin=-3.5, ymax=-3.5)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(breaks = seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month"), date_labels =  "%b %d") + #scale_x_date(date_breaks = "2 month", date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-5")),
xmax=as.numeric(as.Date("2020-10-5")),ymin=-3.4, ymax=-3.4) +
annotation_custom(textGrob("June 01", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-06-1")),
xmax=as.numeric(as.Date("2020-06-1")),ymin=-3.4, ymax=-3.4)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
barplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) +
geom_bar(stat="identity") +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(breaks = seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month"), date_labels =  "%b %d")
#scale_x_date(date_breaks = "1 month", date_labels =  "%b %d")
barplot
View(g)
rm(table1)
View(table)
## Q3.4
table <- district_data %>% mutate(year=substr(date,1,4))%>%
group_by(stname_iaa, year) %>%
summarize(temperature=round(mean(temperature,na.rm=T),3))
table <- spread(table, stname_iaa, temperature)
memory.limit()
write_dta (district_data, "~/Desktop/TASK_FOR_APPLICANT\ 3/Output",version=13)
library(haven)
write_dta (district_data, "~/Desktop/TASK_FOR_APPLICANT\ 3/Output",version=13)
write_dta (district_data, "~/Desktop/TASK_FOR_APPLICANT\ 3/Output/district_data.dta",version=13)
write_dta (jaipur_rainfall, "~/Desktop/TASK_FOR_APPLICANT\ 3/Output/jaipur_rainfall.dta",version=13)
save.image("~/Desktop/TASK_FOR_APPLICANT 3/PredocTask.RData")
filename <- list.files("~/Desktop/TASK_FOR_APPLICANT\ 3/Rainfall")
n <- length(filename)
rainfall <- vector("list", n)
for (i in 1:n) {
rainfall[[i]] <- read.csv(filename[i])
}
filename <- list.files("~/Desktop/TASK_FOR_APPLICANT\ 3/Temperature")
n <- length(filename)
temperature <- vector("list", n)
for (i in 1:n) {
temperature[[i]] <- read.csv(filename[i])
}
## import data
filename <- list.files("~/Desktop/TASK_FOR_APPLICANT\ 3/Rainfall")
n <- length(filename)
rainfall <- vector("list", n)
for (i in 1:n) {
rainfall[[i]] <- read.csv(filename[i])
}
## import data
setwd("~/Desktop/TASK_FOR_APPLICANT\ 3/Rainfall")
filename <- list.files(); n <- length(filename)
rainfall <- vector("list", n)
for (i in 1:n) {
rainfall[[i]] <- read.csv(filename[i])
}
setwd("~/Desktop/TASK_FOR_APPLICANT\ 3/Temperature")
filename <- list.files(); n <- length(filename)
temperature <- vector("list", n)
for (i in 1:n) {
temperature[[i]] <- read.csv(filename[i])
}
district_crosswalk <- read.csv("~/Desktop/TASK_FOR_APPLICANT\ 3/Geo/district_crosswalk_small.csv")
#### Q2 ####
## for each district, find out all grid points within 100km of its centroid
location <- unique(rainfall[[1]][,c('latitude','longitude')])  #extract the location of each grid point
View(location)
district <- district_crosswalk[1,]
district[,c('longitude','latitude','distance')]<-NA
View(district)
View(district_crosswalk)
max(rainfall[[1]]$rainfall)
max(rainfall[[1]]$rainfall,na.rm = T)
max(rainfall[[2]]$rainfall,na.rm = T)
max(rainfall[[3]]$rainfall,na.rm = T)
#### Q2 ####
## for each district, find out all grid points within 100km of its centroid
location <- unique(rainfall[[1]][,c('longitude','latitude')])  #extract the location of each grid point
for (i in 1:dim(district_crosswalk)[1]) {
newdata <- data.frame(district_crosswalk[i,], latitude=NA, longitude=NA, distance=NA)
for (j in 1:dim(location)[1]) {
distance <- as.numeric(distm(location[j,],
c(district_crosswalk$centroid_longitude[i], district_crosswalk$centroid_latitude[i]),
fun = distVincentyEllipsoid)/1000)
if ( distance < 100){
newdata[1,c('latitude','longitude','distance')] <- c(location$latitude[j], location$longitude[j],distance)
district <- rbind(district, newdata)
}
}
}
district <- district[-1,]
district <- mutate(district, weight=1/(distance^2))  #generate weight; assume distance is in terms of km
## import data
setwd("~/Desktop/TASK_FOR_APPLICANT\ 3/Rainfall")
filename <- list.files(); n <- length(filename)
rainfall <- read.csv(filename[1])
for (i in 2:n) {
newdata <- read.csv(filename[i])
rainfall <- rbind(rainfall, newdata)
}
setwd("~/Desktop/TASK_FOR_APPLICANT\ 3/Temperature")
filename <- list.files(); n <- length(filename)
temperature <- read.csv(filename[1])
View(temperature)
for (i in 2:n) {
newdata <- read.csv(filename[i])
temperature <- rbind(temperature, newdata)
}
district_crosswalk <- read.csv("~/Desktop/TASK_FOR_APPLICANT\ 3/Geo/district_crosswalk_small.csv")
rm(newdata)
#### Q2 ####
## for each district, find out all grid points within 100km of its centroid
location <- unique(rainfall[[1]][,c('longitude','latitude')])  #extract the location of each grid point
#### Q2 ####
## for each district, find out all grid points within 100km of its centroid
location <- unique(rainfall[,c('longitude','latitude')])  #extract the location of each grid point
district <- district_crosswalk[1,]
district[,c('longitude','latitude','distance')]<-NA
for (i in 1:dim(district_crosswalk)[1]) {
newdata <- data.frame(district_crosswalk[i,], latitude=NA, longitude=NA, distance=NA)
for (j in 1:dim(location)[1]) {
distance <- as.numeric(distm(location[j,],
c(district_crosswalk$centroid_longitude[i], district_crosswalk$centroid_latitude[i]),
fun = distVincentyEllipsoid)/1000)
if ( distance < 100){
newdata[1,c('latitude','longitude','distance')] <- c(location$latitude[j], location$longitude[j],distance)
district <- rbind(district, newdata)
}
}
}
View(district)
district <- district[-1,]
district <- mutate(district, weight=1/(distance^2))  #generate weight; assume distance is in terms of km
## change the format of date in temperature data to be consistent with that in rainfall data
temperature1 <- temperature %>%
mutate(date=as.numeric(format(ISOdate(year, month, day), format="%Y%m%d"))) %>%
arrange(date)
View(temperature1)
207*1754786
## merge rainfall and temperature data for each grid point within a district
district_grid <- (district, rainfall, by=c('latitude','longitude'),all.x=TRUE)
## merge rainfall and temperature data for each grid point within a district
district_grid <- merge(district, rainfall, by=c('latitude','longitude'),all.x=TRUE)
View(district_grid)
207*365*5
207*(365*4+366)
View(temperature)
## change the format of date in temperature data to be consistent with that in rainfall data
temperature <- temperature %>%
mutate(date=as.numeric(format(ISOdate(year, month, day), format="%Y%m%d"))) %>%
arrange(date)
View(temperature)
rm(temperature1)
View(rainfall)
district_grid <- merge(district_grid, temperature[,c('date','latitude','longitude','temperature')],
by=c('date','latitude','longitude'), all.x=TRUE)
district_grid <- arrange(district_grid, stname_iaa, distname_iaa, date)
weighted.mean(c(4,5), c(1,2))
4*1/3+10/3
district_data <- district_grid %>% group_by(distname_iaa, date) %>%
summarize(stname_iaa = unique(stname_iaa), stid_iaa = unique(stid_iaa),
distid_iaa = unique(distid_iaa), unique_dist_id = unique(unique_dist_id),
temperature = weighted.mean(temperature, weight, na.rm=TRUE),
rainfall = weighted.mean(rainfall, weight, na.rm=TRUE),
total_rainfall = sum(rainfall,na.rm=TRUE)) %>% ungroup()
View(district_data)
(21.22*0.0001391049+21.4*0.0006483638+18.44*0.0001448164)/(0.0001391049+0.0006483638+0.0001448164)
max(district_grid$rainfall,na.rm = T)
which(district_grid$rainfall>300)
View(district_grid[35283,])
View(district_data[district_data$date=="20090716" & district_data$unique_dist_id==1701,])
max(district_grid$rainfall[district_grid$distname_iaa=="jaipur"],na.rm = T)
View(district_grid[district_grid$distname_iaa=="jaipur",])
View(district_data)
View(district_grid[district_grid$distname_iaa=="jaipur" & district_grid$rainfall>0,])
View(district_grid[district_grid$distname_iaa=="jaipur" & district_grid$rainfall>0 & district_grid$date=="20090320",])
View(district_grid[district_grid$distname_iaa=="jaipur",])
district_data <- district_grid %>% group_by(distname_iaa, date) %>%
summarize(stname_iaa = unique(stname_iaa), stid_iaa = unique(stid_iaa),
distid_iaa = unique(distid_iaa), unique_dist_id = unique(unique_dist_id),
temperature = weighted.mean(temperature, weight, na.rm=TRUE),
rainfall = weighted.mean(rainfall, weight, na.rm=TRUE),
total_rainfall = sum(rainfall,na.rm=TRUE)) %>%
ungroup() %>% arrange(district_data, stname_iaa, distname_iaa, date)
#### Q3 ####
## Q3.1  create a time series dataset of daily rainfall for Jaipur, averaged over the five years
jaipur_rainfall <- district_data %>% filter(distname_iaa=="jaipur") %>% dplyr::select(date,rainfall)
View(jaipur_rainfall)
4*(365*4+366)
(365*4+366)
jaipur_rainfall <- jaipur_rainfall %>%
mutate(md = substr(date, 5, 8)) %>%
group_by(md) %>%
summarize(rainfall = mean(rainfall, na.rm=T))
rm(newdata)
## Q3.2 using this time series, create a scatterplot of rainfall by day
jaipur_rainplot <- jaipur_rainfall %>% mutate(md=as.Date(md,"%m%d"))
View(jaipur_rainplot)
scatterplot <- ggplot(data=jaipur_rainplot, aes(md, rainfall)) + geom_point() +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(breaks = seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month"), date_labels =  "%b %d") +
geom_vline(xintercept = as.numeric(as.Date("2020-06-01")), color="red") +
geom_vline(xintercept = as.numeric(as.Date("2020-10-13")), color="red") +
annotation_custom(textGrob("Oct 14", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-10-5")),
xmax=as.numeric(as.Date("2020-10-5")),ymin=-3.4, ymax=-3.4) +
annotation_custom(textGrob("June 01", gp = gpar(col = "red", cex=0.8)),
xmin=as.numeric(as.Date("2020-06-1")),
xmax=as.numeric(as.Date("2020-06-1")),ymin=-3.4, ymax=-3.4)
g=ggplotGrob(scatterplot)
g$layout$clip[g$layout$name=="panel"] <- "off"
grid.draw(g)
## Q3.3 format your graphs so that they are publication-quality
ggplot(data=jaipur_rainplot, aes(md, rainfall)) +
geom_bar(stat="identity") +
xlab("Date") + ylab("Rainfall") + theme_bw() +
ggtitle("Average Daily Rainfall - Jaipur \n2009-2013") +
scale_x_date(breaks = seq(as.Date("2020-01-01"), as.Date("2021-01-01"), by="2 month"), date_labels = "%b %d")
## Q3.4 create a table of annual average temperature by state and year
table <- district_data %>% mutate(year=substr(date,1,4)) %>%
group_by(stname_iaa, year) %>%
summarize(temperature=round(mean(temperature,na.rm=T),3))
View(table)
table <- spread(table, stname_iaa, temperature)
save.image("~/Desktop/TASK_FOR_APPLICANT 3/PredocTask v1.RData")
View(jaipur_rainfall)
exit
q()
